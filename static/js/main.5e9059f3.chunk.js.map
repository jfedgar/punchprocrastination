{"version":3,"sources":["GridBox.js","Grid.js","App.js","serviceWorker.js","index.js"],"names":["GridBox","props","useState","checked","setChecked","useEffect","id","className","onClick","e","preventDefault","isChecked","checkedBoxes","db","collection","doc","calendarID","set","lastUpdated","Date","now","then","console","log","catch","error","sendToFirebase","displayCheck","Grid","blankArray","Array","fill","_","map","value","index","checkedBoxesArray","this","key","displayGridBoxes","React","Component","App","state","url","window","location","href","uniqueID","userData","copied","resolveUniqueID","initializeFirebase","getFirebaseData","path","pathname","substring","pathLength","length","generateUnqiueID","newID","uuidv4","history","pushState","document","title","isEmpty","get","setState","data","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","isMac","osName","toLowerCase","includes","text","onCopy","bookMarkInstructions","newUser","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"+WA6CeA,MA1Cf,SAAiBC,GAAQ,IAAD,EACQC,oBAA2B,IAAlBD,EAAME,SADvB,mBACfA,EADe,KACNC,EADM,KAmCtB,OAhCAC,qBAAU,WACRD,EAAWH,EAAME,WAChB,CAACF,EAAME,UA+BR,yBAAKG,GAAIL,EAAMK,GAAIC,UAAU,UAAUC,QA7BzC,SAAqBC,GACnBA,EAAEC,iBACFN,GAAYD,GAId,SAAwBQ,GACtB,IAAIC,EAAeX,EAAMW,aACzBA,EAAaX,EAAMK,IAAMK,EACzBV,EAAMY,GAAGC,WAAW,aAAaC,IAAId,EAAMe,YAAYC,IAAI,CACzDL,aAAeA,EACfM,YAAaC,KAAKC,QAEnBC,MAAK,WACJC,QAAQC,IAAI,qCAEbC,OAAM,SAASC,GACdH,QAAQG,MAAM,2BAA4BA,MAd5CC,EAAgBvB,KAmBlB,WACE,IAAgB,IAAZA,EACF,OAAO,kBAAC,IAAD,CAASI,UAAU,UAMxBoB,KCEOC,E,kLAnCQ,IAAD,OACdC,EAAaC,MAAM,IAAIC,MAAK,GAChC,OAAOC,IAAEC,IAAIJ,GAAY,SAACK,EAAOC,GAC/B,OAAO,EAAKlC,MAAMW,aAAauB,KAAU,O,yCAIzB,IAAD,OACbC,EAAoBC,KAAKD,oBAc7B,OAbgBJ,IAAEC,IAAIG,GAAmB,SAACjC,EAASmC,GACjD,OACE,kBAAC,EAAD,CACEhC,GAAIgC,EACJA,IAAKA,EACLnC,QAASA,EACTS,aAAcwB,EACdpB,WAAY,EAAKf,MAAMe,WACvBH,GAAI,EAAKZ,MAAMY,U,+BASrB,OACE,yBAAKP,GAAG,QACJ+B,KAAKE,wB,GA/BIC,IAAMC,WCmJVC,E,kDAlIb,WAAYzC,GAAQ,IAAD,8BAajB,cAAMA,IApBR0C,MAAQ,CACNC,IAAKC,OAAOC,SAASC,KACrBC,SAAU,KACVC,SAAU,GACVC,QAAQ,GAiBR,EAAKC,kBACL,EAAKC,qBAfY,E,gEAmBjBf,KAAKgB,oB,wCAIL,IAAIC,EAAOT,OAAOC,SAASS,SAASC,UAAU,GAC1CC,EAAaH,EAAKI,OACtBpC,QAAQC,IAAI+B,GACO,KAAfG,EACFpB,KAAKsB,mBAELtB,KAAKM,MAAL,SAAyBW,I,yCAK3BhC,QAAQC,IAAI,sBACZD,QAAQC,IAAI,iBACZ,IAAIqC,EAAQC,cAEZhB,OAAOiB,QAAQC,UAAU,GAAIC,SAASC,MAAOL,GAC7CvB,KAAKM,MAAL,IAAoBE,OAAOC,SAASC,KACpCV,KAAKM,MAAL,SAAyBiB,I,wCAGR,IAAD,OAEhB,IAAK5B,IAAEkC,QAAQ7B,KAAKM,MAAMM,UAAW,OAAO,EAE5CZ,KAAKM,MAAM9B,GAAGC,WAAW,aACtBC,IAAIsB,KAAKM,MAAMK,UACfmB,MACA9C,MAAK,SAACN,GACL,EAAKqD,SAAS,CAAEnB,SAAUlC,EAAIsD,QAAU,QAEzC7C,OAAM,SAASC,GACdH,QAAQG,MAAM,2BAA4BA,Q,2CAgBzC6C,OAAcZ,SACjBY,gBAZmB,CACnBC,OAAQ,0CACRC,WAAY,uCACZC,YAAa,8CACbC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKfR,eAGFjC,KAAKM,MAAL,mBAAmC2B,EACnCjC,KAAKM,MAAL,GAAmB2B,gB,8BAInBjC,KAAK0C,MAAQ1C,KAAK0C,OAASC,SAAOC,cAAcC,SAAS,S,6CAIzD,OAAI7C,KAAK0C,MACA,qFAEA,+E,+BAID,IAAD,OAEP,OADAzD,QAAQC,IAAI,QAASc,KAAKM,OAExB,yBAAKpC,UAAU,OACb,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAiB4E,KAAM9C,KAAKM,MAAMC,IAChCwC,OAAQ,kBAAM,EAAKhB,SAAS,CAAClB,QAAQ,MACrC,0BAAM5C,GAAG,cAAa,kBAAC,IAAD,MAAtB,0BAEF,kBAAC,cAAD,KACI+B,KAAKgD,wBAET,yBAAK/E,GAAG,YACN,kBAAC,EAAD,CACEgF,QAASjD,KAAKM,MAAM2C,QACpB1E,aAAcyB,KAAKM,MAAMM,SAAX,cAAuC,GACrDjC,WAAYqB,KAAKM,MAAMK,SACvBnC,GAAIwB,KAAKM,MAAM9B,Y,GApHX2B,IAAMC,WCDJ8C,QACW,cAA7B1C,OAAOC,SAAS0C,UAEe,UAA7B3C,OAAOC,SAAS0C,UAEhB3C,OAAOC,SAAS0C,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5B,SAAS6B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3E,MAAK,SAAA4E,GACJA,EAAaC,gBAEd1E,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAM0E,c","file":"static/js/main.5e9059f3.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { FaCheck } from 'react-icons/fa';\n\nfunction GridBox(props) {\n  const [checked, setChecked] = useState(props.checked === true);\n\n  useEffect(() => {\n    setChecked(props.checked);\n  }, [props.checked]);\n\n  function handleClick(e) {\n    e.preventDefault();\n    setChecked(!checked)\n    sendToFirebase(!checked)\n  }\n\n  function sendToFirebase(isChecked) {\n    let checkedBoxes = props.checkedBoxes\n    checkedBoxes[props.id] = isChecked;\n    props.db.collection(\"calendars\").doc(props.calendarID).set({\n      checkedBoxes:  checkedBoxes,\n      lastUpdated: Date.now()\n    })\n    .then(function() {\n      console.log(\"Document successfully written!\");\n    })\n    .catch(function(error) {\n      console.error(\"Error writing document: \", error);\n    });\n\n  }\n\n  function displayCheck() {\n    if (checked === true) {\n      return <FaCheck className='check' />;\n    }\n  }\n\n  return (\n    <div id={props.id} className='gridBox' onClick={handleClick}>\n      { displayCheck() }\n    </div>\n  );\n}\n\nexport default GridBox;","import React from 'react';\nimport _ from 'underscore';\nimport GridBox from './GridBox.js'\n\nclass Grid extends React.Component {\n\n  // ensures the checkedBoxes array always has a length of 35\n  checkedBoxesArray() {\n    let blankArray = Array(35).fill(false)\n    return _.map(blankArray, (value, index) => {\n      return this.props.checkedBoxes[index] || false;\n    });\n  }\n\n  displayGridBoxes() {\n    let checkedBoxesArray = this.checkedBoxesArray();\n    let gridBoxes = _.map(checkedBoxesArray, (checked, key) => {\n      return (\n        <GridBox\n          id={key}\n          key={key}\n          checked={checked}\n          checkedBoxes={checkedBoxesArray}\n          calendarID={this.props.calendarID}\n          db={this.props.db}\n        />\n      );\n    });\n\n    return gridBoxes;\n  }\n\n  render() {\n    return(\n      <div id='grid'>\n        { this.displayGridBoxes() }\n      </div>\n    );\n  }\n\n}\n\nexport default Grid","import React from 'react';\nimport _ from 'underscore';\nimport * as firebase from 'firebase';\nimport CopyToClipboard from 'react-copy-to-clipboard'\nimport { MdContentCopy } from 'react-icons/md';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  BrowserView,\n  osName,\n} from \"react-device-detect\";\nimport './App.css';\nimport Grid from './Grid.js'\n\nclass App extends React.Component {\n  state = {\n    url: window.location.href,\n    uniqueID: null,\n    userData: {},\n    copied: false\n  }\n\n  constructor(props) {\n    //set url\n    // If nothing after punchprocrastination.com/ generate random uuid and append\n    //   set url in browser\n    //   this is a new user\n    //   don't save until they click a calendar entry or set an activity\n    // If there is anything after punchprocrastination.com/ look up in firebase\n    //   no need to set url in browser\n    //   If found on firebase, get data and fill in\n\n    //   If not found ... ?\n    //      Should probably also set as the url value \n\n    super(props)\n    this.resolveUniqueID();\n    this.initializeFirebase();\n  }\n\n  componentDidMount() {\n    this.getFirebaseData();\n  }\n\n  resolveUniqueID() {\n    let path = window.location.pathname.substring(1);\n    let pathLength = path.length\n    console.log(path)\n    if (pathLength !== 36) {\n      this.generateUnqiueID();\n    } else {\n      this.state['uniqueID'] = path;\n    }\n  }\n\n  generateUnqiueID() {\n    console.log('generate unique id')\n    console.log('replace state')\n    let newID = uuidv4();\n    //window.location.pathname = newID;\n    window.history.pushState({}, document.title, newID);\n    this.state['url'] = window.location.href\n    this.state['uniqueID'] = newID\n  }\n\n  getFirebaseData() {\n    // We already have data for user:\n    if (!_.isEmpty(this.state.userData)) return false;\n\n    this.state.db.collection(\"calendars\")\n      .doc(this.state.uniqueID)\n      .get()\n      .then((doc) => {\n        this.setState({ userData: doc.data() || {} });\n      })\n      .catch(function(error) {\n        console.error(\"Error reading document: \", error);\n      });\n  }\n\n  initializeFirebase() {\n    let firebaseConfig = {\n      apiKey: \"AIzaSyDEUWWqLD9MXOlxPHhhcT-TicbaIGBH55I\",\n      authDomain: \"punchprocrastination.firebaseapp.com\",\n      databaseURL: \"https://punchprocrastination.firebaseio.com\",\n      projectId: \"punchprocrastination\",\n      storageBucket: \"punchprocrastination.appspot.com\",\n      messagingSenderId: \"881349191831\",\n      appId: \"1:881349191831:web:6776979685e5b82347e1d2\",\n      measurementId: \"G-Y0D1Y2B65C\"\n    };\n\n    if (!firebase.apps.length) {\n      firebase.initializeApp(firebaseConfig);\n      firebase.analytics();\n    }\n\n    this.state['firebaseConnection'] = firebase\n    this.state['db'] = firebase.firestore();\n  }\n\n  isMac() {\n    this.isMac = this.isMac || osName.toLowerCase().includes('mac')\n  }\n\n  bookMarkInstructions() {\n    if (this.isMac) {\n      return <span>Click Command (âŒ˜) + D to add site to bookmarks</span>;\n    } else {\n      return <span>Click CTRL (^) + D to add site to bookmarks</span>;\n    }\n  }\n\n  render() {\n    console.log('state', this.state)\n    return (\n      <div className=\"App\">\n        <div className=\"main\">\n          <CopyToClipboard text={this.state.url}\n            onCopy={() => this.setState({copied: true})}>\n            <span id='copyButton'><MdContentCopy />Copy URL To Clipboard</span>\n          </CopyToClipboard>\n          <BrowserView>\n            { this.bookMarkInstructions() }\n          </BrowserView>\n          <div id='calendar'>\n            <Grid\n              newUser={this.state.newUser}\n              checkedBoxes={this.state.userData['checkedBoxes'] || []}\n              calendarID={this.state.uniqueID}\n              db={this.state.db}\n            />\n          </div>\n            {/*\n            <p>\n              Edit <code>src/App.js</code> and save to reload.\n            </p>\n            <a\n              className=\"App-link\"\n              href=\"https://reactjs.org\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Learn React\n            </a>\n            */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}