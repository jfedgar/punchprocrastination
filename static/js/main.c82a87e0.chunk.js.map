{"version":3,"sources":["GridBox.js","Grid.js","App.js","serviceWorker.js","index.js"],"names":["GridBox","props","useState","clicked","checked","setChecked","id","class","onClick","e","console","log","preventDefault","displayCheck","Grid","React","Component","App","state","url","copied","this","isMac","osName","toLowerCase","includes","className","text","onCopy","setState","bookMarkInstructions","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c82a87e0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { FaCheck } from 'react-icons/fa';\n\nfunction GridBox(props) {\n  const [checked, setChecked] = useState(props.clicked === true);\n\n  function handleClick(e) {\n    console.log('clicked!!!!');\n    console.log(e)\n    e.preventDefault();\n    setChecked(!checked)\n  }\n\n  function displayCheck() {\n    if (checked === true) {\n      return <FaCheck class='check' />;\n    }\n  }\n\n  return (\n    <div id={props.id} class='gridBox' onClick={handleClick}>\n      { displayCheck() }\n    </div>\n  );\n}\n\nexport default GridBox;","import React from 'react';\nimport GridBox from './GridBox.js'\n\nclass Grid extends React.Component {\n  constructor(props) {\n    // get grid from firebase (?) (or pass in with props)\n    // for each box pass in \n    super(props)\n  }\n\n  render() {\n    return(\n      <div id='grid'>\n        <GridBox id='1x1' clicked={true} />\n        <GridBox id='1x2' clicked={true} />\n        <GridBox id='1x2' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n\n        <GridBox id='1x1' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n\n        <GridBox id='1x1' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n\n        <GridBox id='1x1' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n\n        <GridBox id='1x1' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n        <GridBox id='1x2' clicked={false} />\n\n\n\n\n      </div>\n    );\n  }\n\n}\n\nexport default Grid","import React from 'react';\nimport CopyToClipboard from 'react-copy-to-clipboard'\nimport { MdContentCopy } from 'react-icons/md';\nimport {\n  BrowserView,\n  osName,\n} from \"react-device-detect\";\nimport './App.css';\nimport Grid from './Grid.js'\n\nclass App extends React.Component {\n  state = {\n    url: 'foo',\n    copied: false,\n  }\n\n  constructor(props) {\n    //set url\n    // If nothing after punchprocrastination.com/ generate random uuid and append\n    //   set url in browser\n    //   this is a new user\n    //   don't save until they click a calendar entry or set an activity\n    // If there is anything after punchprocrastination.com/ look up in firebase\n    //   no need to set url in browser\n    //   If found on firebase, get data and fill in\n\n    //   If not found ... ?\n    //      Should probably also set as the url value \n\n    super(props)\n  }\n\n  isMac() {\n    this.isMac = this.isMac || osName.toLowerCase().includes('mac')\n  }\n\n  bookMarkInstructions() {\n    if (this.isMac) {\n      return <span>Click Command (âŒ˜) + D to add to favorites</span>;\n    } else {\n      return <span>Click CTRL (^) + D to add to favorites</span>;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"main\">\n          <CopyToClipboard text={this.state.url}\n            onCopy={() => this.setState({copied: true})}>\n            <span><MdContentCopy />Copy URL To Clipboard</span>\n          </CopyToClipboard>\n          <BrowserView>\n            { this.bookMarkInstructions() }\n          </BrowserView>\n          <div id='calendar'>\n            <Grid />\n          </div>\n            {/*\n            <p>\n              Edit <code>src/App.js</code> and save to reload.\n            </p>\n            <a\n              className=\"App-link\"\n              href=\"https://reactjs.org\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Learn React\n            </a>\n            */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}